1) pair sum :

Return pair in sorted array with target sum

arr = [2,7,11,15]   target =9;

brute force


vector<int> pairSum(vector<int> nums, int target){
  vector<int> ans;
  int n = nums.size();

   for(int i= 0; i<n; i++){
    for(int j= i+1; j<n; j++){
      if(nums[i] + nums[j] == target){
        ans.push_back(i);
        ans.push_back(j);
        return ans;
      }
    }
  }
  return ans;
}

int main(){
  vector<int> nums = {2, 7, 11, 15};
  int target = 9;

  vector<int> ans = pairSum(nums, target);
  cout << ans[0] << "," << ans[1] << endl;
  return 0;
}


two pointer approach

vector<int> pairSum(vector<int> nums, int target){
  vector<int> ans;
  int n = nums.size();

int i = 0, j = n-1;

while(i < j){
  int pairSum = nums[i] + nums[j];
  if(pairSum > target){
    j--;
  }else if(pairSum < target){
    i++;
  }else {
    ans.push_back(i);
    ans.push_back(j);
    return ans;
  }
}
  return ans;
}

int main(){
  vector<int> nums = {2, 7, 11, 15};
  int target = 9;

  vector<int> ans = pairSum(nums, target);
  cout << ans[0] << "," << ans[1] << endl;
  return 0;
}

2) nums = {1,2,2,1,1} 

sol.

    int majorityElement(vector<int>& nums) {
        int n = nums.size();

        for(int val : nums){
            int freq = 0;
            for(int el : nums){
                if(el == val){
                    freq++;
                }
            }
            if(freq > n/2){
                return val;
            }
        }
        return -1;
    }


// next way to solve 
sorting method

    int majorityElement(vector<int>& nums) {
        int n = nums.size();

// sort 
sort(nums.begin(), nums.end());

// freq count
int freq =1, ans = nums[0];
for(int i=1; i<n; i++){
    if(nums[i] == nums[i-1]){
        freq++;
    }
    else{
        freq= 1;
        ans = nums[i];
    };
    if(freq > n/2){
        return ans;
    }
}
return ans;

    }
};


